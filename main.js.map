{"version":3,"sources":["./src/app/ghost.ts","./src/environments/environment.ts","./src/app/evidence-type.enum.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/evidence.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Evidence} from \"./evidence\";\nimport {EvidenceType} from \"./evidence-type.enum\";\n\nexport class Ghost {\n  name: string;\n  isDisplayed: boolean = true;\n  description: string = '';\n\n  evidences: EvidenceType[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  addEvidence(evidence: EvidenceType) {\n    this.evidences.push(evidence);\n    return this;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export enum EvidenceType {\n  EMF5,\n  FINGERPRINT,\n  FREEZING,\n  ORB,\n  GHOST_WRITING,\n  SPIRIT_BOX\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Evidence} from \"./evidence\";\nimport {Ghost} from \"./ghost\";\nimport {EvidenceType} from \"./evidence-type.enum\";\nimport {MatButtonToggleChange} from \"@angular/material/button-toggle\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'PhasmophobiaJournal';\n  evidences: Evidence[] = [];\n  ghosts: Ghost[] = [];\n  selectedEvidence: Evidence[] = [];\n\n  ngOnInit(): void {\n    this.evidences.push(new Evidence(EvidenceType.EMF5, 'EMF Level 5'));\n    this.evidences.push(new Evidence(EvidenceType.FINGERPRINT, 'Fingerprints'));\n    this.evidences.push(new Evidence(EvidenceType.FREEZING, 'Freezing Temperature'));\n    this.evidences.push(new Evidence(EvidenceType.ORB, 'Ghost Orb'));\n    this.evidences.push(new Evidence(EvidenceType.GHOST_WRITING, 'Ghost Writing'));\n    this.evidences.push(new Evidence(EvidenceType.SPIRIT_BOX, 'Sprit Box'));\n\n    let sprit = new Ghost('Spirit')\n      .addEvidence(EvidenceType.FINGERPRINT)\n      .addEvidence(EvidenceType.GHOST_WRITING)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let wraith = new Ghost('Wraith')\n      .addEvidence(EvidenceType.FINGERPRINT)\n      .addEvidence(EvidenceType.FREEZING)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let phantom = new Ghost('Phantom')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.FREEZING)\n      .addEvidence(EvidenceType.ORB);\n    let banshee = new Ghost('Banshee')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.FINGERPRINT)\n      .addEvidence(EvidenceType.FREEZING);\n    let jinn = new Ghost('Jinn')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.ORB)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let mare = new Ghost('Mare')\n      .addEvidence(EvidenceType.FREEZING)\n      .addEvidence(EvidenceType.ORB)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let revenant = new Ghost('Revenant')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.FINGERPRINT)\n      .addEvidence(EvidenceType.GHOST_WRITING);\n    let shade = new Ghost('Shade')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.ORB)\n      .addEvidence(EvidenceType.GHOST_WRITING);\n    let deamon = new Ghost('Demon')\n      .addEvidence(EvidenceType.FREEZING)\n      .addEvidence(EvidenceType.GHOST_WRITING)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let yurei = new Ghost('Yurei')\n      .addEvidence(EvidenceType.FREEZING)\n      .addEvidence(EvidenceType.GHOST_WRITING)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n    let oni = new Ghost('Oni')\n      .addEvidence(EvidenceType.EMF5)\n      .addEvidence(EvidenceType.GHOST_WRITING)\n      .addEvidence(EvidenceType.SPIRIT_BOX);\n\n    sprit.description=\"A Spirit is the most common Ghost you will come across, but it is still very powerful and dangerous. It is usually discovered at one of its hunting grounds after an unexplained death. It has no special strengths. Smudge sticks affect Spirits by preventing them from hunting for about three minutes.\";\n    wraith.description=\"A Wraith is one of the most dangerous ghosts you will find. It is the only known Ghost that has the ability of flight, and has sometimes been known to see through doors and go through walls. Salt is toxic to a Wraith.\";\n    phantom.description=\"A Phantom is a fear-inducing ghost, quickly draining the sanity of those who view it. Taking a picture of it will make it disappear temporarily. Although rumored to possess the living, it has no ability to actually do so. It is said to be commonly summoned by a Ouija Board, although players cannot summon one themselves, nor does a Phantom's presence guarantee that a Ouija Board will spawn.\";\n\n    this.ghosts.push(sprit);\n    this.ghosts.push(wraith);\n    this.ghosts.push(phantom);\n    this.ghosts.push(banshee);\n    this.ghosts.push(jinn);\n    this.ghosts.push(mare);\n    this.ghosts.push(revenant);\n    this.ghosts.push(shade);\n    this.ghosts.push(deamon);\n    this.ghosts.push(yurei);\n    this.ghosts.push(oni);\n\n  }\n\n\n  getEvidenceLabel(evidence: EvidenceType) {\n    let find = this.evidences.find(value => value.name === evidence);\n    if (find == null) {\n      return 'NOT_FOUND';\n    }\n    return find.label;\n\n  }\n\n  selectEvidence($event: MatButtonToggleChange) {\n    let isRemove: boolean = !$event.source.checked;\n\n    if (isRemove) {\n      let find = this.selectedEvidence.find(value => value.name == $event.value);\n      if (find != null) {\n        this.selectedEvidence.splice(this.selectedEvidence.indexOf(find), 1);\n      }\n    } else {\n      let find = this.evidences.find(value => value.name == $event.value);\n      if (find != null) {\n        this.selectedEvidence.push(find);\n      }\n    }\n    this.updateGhosts();\n    this.updateAvailableEvidence();\n  }\n\n  updateGhosts() {\n    for (const ghost of this.ghosts) {\n      if (!ghost.isDisplayed) {\n        ghost.isDisplayed = true;\n      }\n      for (const evidence of this.selectedEvidence) {\n        if (ghost.evidences.indexOf(evidence.name) < 0) {\n          ghost.isDisplayed = false;\n          break;\n        }\n      }\n    }\n  }\n\n  private updateAvailableEvidence() {\n    for (const evidence of this.evidences) {\n      evidence.isEnabled = false;\n    }\n    let activeGhosts = this.ghosts.filter(value => value.isDisplayed);\n    for (const activeGhost of activeGhosts) {\n      for (const ghostEvidence of activeGhost.evidences) {\n        let evidence = this.evidences.find(value => value.name === ghostEvidence);\n        if (evidence != null) {\n          evidence.isEnabled = true;\n        }\n      }\n    }\n  }\n\n  reset() {\n    this.selectedEvidence = [];\n    for (const evidence of this.evidences) {\n      evidence.isEnabled = true;\n    }\n    for (const ghost of this.ghosts) {\n      ghost.isDisplayed = true;\n    }\n  }\n}\n\n\n","<section>\n  <h2>Evidences</h2>\n  <div class=\"example-button-row\">\n    <mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\" [multiple]=\"true\" [(ngModel)]=\"selectedEvidence\">\n      <mat-button-toggle color=\"primary\" *ngFor=\"let ev of evidences\"  [value]=\"ev\"\n                         (change)=\"selectEvidence($event)\" [disabled]=\"!ev.isEnabled\">{{ev.label}}</mat-button-toggle>\n    </mat-button-toggle-group>\n    <button mat-raised-button color=\"warn\" (click)=\"reset()\">Reset</button>\n  </div>\n</section>\n\n<section>\n  <h2>Ghosts</h2>\n    <div *ngFor=\"let ghost of ghosts\" style=\"padding-top: 10px;\">\n      <mat-card class=\"example-card\" *ngIf=\"ghost.isDisplayed\" style=\"border: lightgray solid\">\n        <mat-card-header>\n          <div mat-card-avatar class=\"example-header-image\"></div>\n          <mat-card-title>{{ghost.name}}</mat-card-title>\n          <mat-card-subtitle></mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n          <p>\n            {{ghost.description}}\n          </p>\n        </mat-card-content>\n        <mat-card-actions>\n          <div *ngFor=\"let evidence of ghost.evidences\">{{getEvidenceLabel(evidence)}}</div>\n        </mat-card-actions>\n      </mat-card>\n    </div>\n\n\n</section>\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatButtonToggleModule} from \"@angular/material/button-toggle\";\nimport {MatGridListModule} from \"@angular/material/grid-list\";\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatButtonToggleModule,\n    MatGridListModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {EvidenceType} from \"./evidence-type.enum\";\n\nexport class Evidence {\n  name: EvidenceType;\n  label: string;\n  isEnabled: boolean = true;\n\n  constructor(name: EvidenceType, label: string) {\n    this.name = name;\n    this.label = label;\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}